#include <bits/stdc++.h>
using namespace std;

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

//#include <sys/resource.h>     // for linux stack memory increase

#define pb push_back
#define MP make_pair
#define ff first
#define ss second
#define nl puts("")
#define sp printf(" ")
#define phl debug("Hello")
#define FOR(i,x,y) for(vlong i = (x) ; i <= (y) ; ++i)
#define ROF(i,x,y) for(vlong i = (y) ; i >= (x) ; --i)
#define CLR(x,y) memset(x,y,sizeof(x))
#define ALL(x) (x).begin(),(x).end()
#define SZ(x) ((vlong)(x).size())
#define UNIQUE(V) (V).erase(unique((V).begin(),(V).end()),(V).end())
#define MIN(a,b) ((a)<(b)?(a):(b))
#define MAX(a,b) ((a)>(b)?(a):(b))
#define ABS(x) ((x)<0?-(x):(x))
#define FABS(x) ((x)+eps<0?-(x):(x))
#define SQ(x) ((x)*(x))
#define LCM(x,y) (((x)/gcd((x),(y)))*(y))
#define POPCOUNT __builtin_popcountll
#define RIGHTMOST __builtin_ctzll
#define LEFTMOST(x) (63-__builtin_clzll((x)))
#define NUMDIGIT(x,y) (((vlong)(log10((x))/log10((y))))+1)
#define NORM(x) if(x>=mod) x-=mod;if(x<0) x+=mod;
#define ODD(x) (((x)&1)==0?(0):(1))
#define Set(N,cur) N=(N|(1LL<<cur))
#define Reset(N,cur) N=(N&(~(1LL<<cur)))
#define Check(N,cur) (!((N&(1LL<<cur))==0))
#define fast_cin ios_base::sync_with_stdio(false);cin.tie(NULL)

typedef long long vlong;
typedef unsigned long long uvlong;
typedef pair < int, int > pii;
typedef pair < vlong, vlong > pll;
typedef vector<int> vi;
typedef vector<vlong> vl;
typedef vector<pll> vll;
typedef tree <int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pb_ds;

#ifdef forthright48
     #include <ctime>
     clock_t tStart = clock();
     #define debug(args...) {dbg,args; cerr<<endl;}
     #define timeStamp debug ("Execution Time: ", (double)(clock() - tStart)/CLOCKS_PER_SEC)
     #define bug printf("%d\n",__LINE__);

#else
    #define debug(args...)  // Just strip off all debug tokens
    #define timeStamp
#endif

struct debugger{
    template<typename T> debugger& operator , (const T& v){
        cerr<<v<<" ";
        return *this;
    }
}dbg;

inline vlong gcd ( vlong a, vlong b ) {
    a = ABS ( a ); b = ABS ( b );
    while ( b ) { a = a % b; swap ( a, b ); } return a;
}

vlong ext_gcd ( vlong A, vlong B, vlong *X, vlong *Y ){
    vlong x2, y2, x1, y1, x, y, r2, r1, q, r;
    x2 = 1; y2 = 0;
    x1 = 0; y1 = 1;
    for (r2 = A, r1 = B; r1 != 0; r2 = r1, r1 = r, x2 = x1, y2 = y1, x1 = x, y1 = y ) {
        q = r2 / r1;
        r = r2 % r1;
        x = x2 - (q * x1);
        y = y2 - (q * y1);
    }
    *X = x2; *Y = y2;
    return r2;
}

inline vlong modInv ( vlong a, vlong m ) {
    vlong x, y;
    ext_gcd( a, m, &x, &y );
    x %= m;
    if ( x < 0 ) x += m;
    return x;
}

inline vlong bigmod ( vlong a, vlong p, vlong m ) {
    vlong res = 1 % m, x = a % m;
    while ( p ) {
        if ( p & 1 ) res = ( res * x ) % m;
        x = ( x * x ) % m; p >>= 1;
    }
    return res;
}


//int knightDir[8][2] = { {-2,1},{-1,2},{1,2},{2,1},{2,-1},{-1,-2},{1,-2},{-2,-1} };
//int dir4[4][2] = {{-1,0},{0,1},{1,0},{0,-1}};
//int dir8[8][2] = {{-1,0},{0,1},{1,0},{0,-1},{-1,-1},{1,1},{1,-1},{-1,1}};
const vlong inf = 2147383647;
const vlong mod = 1000000007;
const double pi = 2 * acos ( 0.0 );
const double eps = 1e-11;

///======================  TEMPLATE ENDS HERE  =====================///


class CheeseSlicing {
public:
	int dp[102][102][102], S;
	void sortDimensions(int &A, int &B, int &C) {
		if (A > B) swap(A,B);
		if (B > C) swap(B,C);
		if (A > B) swap(A,B);
		return;
	}
	int solve(int A, int B, int C) {		//cerr << A << " " << B << " " << C << " -> " << S << endl;
		if (A < S) {
			return 0;
		}

		int &res = dp[A][B][C], nA, nB, nC;

		if ( res != -1 ) return res;

		res = 0;

		nA = A-S, nB = B, nC = C;
		sortDimensions(nA,nB,nC);
		res = MAX( res, solve(nA,nB,nC) + B * C );

		nA = A, nB = B-S, nC = C;
		sortDimensions(nA,nB,nC);
		res = MAX( res, solve(nA,nB,nC) + A * C );

		nA = A, nB = B, nC = C-S;
		sortDimensions(nA,nB,nC);
		res = MAX( res, solve(nA,nB,nC) + A * B );

		return res;
	}
	int totalArea(int A, int B, int C, int s) {
		S = s;
		CLR(dp,-1);
		sortDimensions(A,B,C);
		return solve(A,B,C);
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, bool hasAnswer, int p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3;
	cout << "]" << endl;
	CheeseSlicing *obj;
	int answer;
	obj = new CheeseSlicing();
	clock_t startTime = clock();
	answer = obj->totalArea(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;

	int p0;
	int p1;
	int p2;
	int p3;
	int p4;

	// ----- test 0 -----
	disabled = false;
	p0 = 1;
	p1 = 3;
	p2 = 3;
	p3 = 2;
	p4 = 0;
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 1 -----
	disabled = false;
	p0 = 5;
	p1 = 3;
	p2 = 5;
	p3 = 3;
	p4 = 25;
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 2 -----
	disabled = false;
	p0 = 5;
	p1 = 5;
	p2 = 5;
	p3 = 2;
	p4 = 58;
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 3 -----
	disabled = false;
	p0 = 49;
	p1 = 92;
	p2 = 20;
	p3 = 3;
	p4 = 30045;
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// You want to make a lot of sandwiches.
// However, you only have a limited amount of cheese.
// The only piece of cheese you currently have is a rectangular block with dimensions A, B, and C.
//
// You can cut the block of cheese into smaller pieces.
// You are only allowed to cut as follows:
//
// Each cut must divide one block of cheese into two smaller blocks of cheese.
// Each cut must be parallel to one of the faces of the piece you are cutting.
// Each of the two smaller blocks must have integer dimensions.
//
//
// When placing a block of cheese onto a piece of bread, the cheese is always rotated so that its shortest side is vertical.
// In other words, suppose you have a block of cheese with dimensions (X,Y,Z) such that X ≥ Y ≥ Z.
// If you place this block onto a piece of bread, its surface area will be X*Y and its thickness will be Z.
//
// A block of cheese is called a good slice if and only if its thickness is greater than or equal to S.
// (Recall that the thickness of a block is the length of its shortest side.)
//
// You can cut your block of cheese into arbitrarily many pieces, as long as you follow the rules given above.
// Your goal is to cut the block in such a way that maximizes the total surface area of all good slices among the pieces.
// Note that your way of cutting may also produce some pieces that are not good slices, but those pieces won't contribute to the surface area.
// The number of good slices does not matter, we only care about their surface.
// Different good slices may have different dimensions.
//
// You are given the ints A, B, C, and S.
// Return the maximum total surface area of good slices you can get.
//
// DEFINITION
// Class:CheeseSlicing
// Method:totalArea
// Parameters:int, int, int, int
// Returns:int
// Method signature:int totalArea(int A, int B, int C, int S)
//
//
// CONSTRAINTS
// -A, B and C will be between 1 and 100, inclusive.
// -S will be between 1 and 10, inclusive.
//
//
// EXAMPLES
//
// 0)
// 1
// 3
// 3
// 2
//
// Returns: 0
//
// One of the dimensions of this block is 1.
// Regardless of how we cut it, each piece will have one dimension equal to 1.
// As S=2, this means that producing a good slice is impossible.
// Hence, the maximum total surface area of good slices is 0.
//
// 1)
// 5
// 3
// 5
// 3
//
// Returns: 25
//
// The entire block is a good slice with thickness 3 and surface area 5*5 = 25.
// An optimal solution is to make no cuts and to simply take this one block.
//
// 2)
// 5
// 5
// 5
// 2
//
// Returns: 58
//
// One possible sequence of cuts:
//
//  5x5x5 -> 2x5x5 + 3x5x5
//  3x5x5 -> 3x2x5 + 3x3x5
//  3x3x5 -> 3x3x2 + 3x3x3
//
// After these three cuts we have four pieces: 2x5x5, 3x2x5, 3x3x2, and 3x3x3.
// Each of these is a good slice.
// Their total surface area is 5*5 + 3*5 + 3*3 + 3*3.
//
// 3)
// 49
// 92
// 20
// 3
//
// Returns: 30045
//
//
//
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
