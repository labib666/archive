#include <bits/stdc++.h>
using namespace std;

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

//#include <sys/resource.h>     // for linux stack memory increase

#define pb push_back
#define MP make_pair
#define ff first
#define ss second
#define nl puts("")
#define sp printf(" ")
#define phl debug("Hello")
#define FOR(i,x,y) for(vlong i = (x) ; i <= (y) ; ++i)
#define ROF(i,x,y) for(vlong i = (y) ; i >= (x) ; --i)
#define CLR(x,y) memset(x,y,sizeof(x))
#define ALL(x) (x).begin(),(x).end()
#define SZ(x) ((vlong)(x).size())
#define UNIQUE(V) (V).erase(unique((V).begin(),(V).end()),(V).end())
#define MIN(a,b) ((a)<(b)?(a):(b))
#define MAX(a,b) ((a)>(b)?(a):(b))
#define ABS(x) ((x)<0?-(x):(x))
#define FABS(x) ((x)+eps<0?-(x):(x))
#define SQ(x) ((x)*(x))
#define LCM(x,y) (((x)/gcd((x),(y)))*(y))
#define POPCOUNT __builtin_popcountll
#define RIGHTMOST __builtin_ctzll
#define LEFTMOST(x) (63-__builtin_clzll((x)))
#define NUMDIGIT(x,y) (((vlong)(log10((x))/log10((y))))+1)
#define NORM(x) if(x>=mod) x-=mod;if(x<0) x+=mod;
#define ODD(x) (((x)&1)==0?(0):(1))
#define Set(N,cur) N=(N|(1LL<<cur))
#define Reset(N,cur) N=(N&(~(1LL<<cur)))
#define Check(N,cur) (!((N&(1LL<<cur))==0))
#define fast_cin ios_base::sync_with_stdio(false);cin.tie(NULL)

typedef long long vlong;
typedef unsigned long long uvlong;
typedef pair < int, int > pii;
typedef pair < vlong, vlong > pll;
typedef vector<int> vi;
typedef vector<vlong> vl;
typedef vector<pll> vll;
typedef tree <int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pb_ds;

#ifdef forthright48
     #include <ctime>
     clock_t tStart = clock();
     #define debug(args...) {dbg,args; cerr<<endl;}
     #define timeStamp debug ("Execution Time: ", (double)(clock() - tStart)/CLOCKS_PER_SEC)
     #define bug printf("%d\n",__LINE__);

#else
    #define debug(args...)  // Just strip off all debug tokens
    #define timeStamp
#endif

struct debugger{
    template<typename T> debugger& operator , (const T& v){
        cerr<<v<<" ";
        return *this;
    }
}dbg;

inline vlong gcd ( vlong a, vlong b ) {
    a = ABS ( a ); b = ABS ( b );
    while ( b ) { a = a % b; swap ( a, b ); } return a;
}

vlong ext_gcd ( vlong A, vlong B, vlong *X, vlong *Y ){
    vlong x2, y2, x1, y1, x, y, r2, r1, q, r;
    x2 = 1; y2 = 0;
    x1 = 0; y1 = 1;
    for (r2 = A, r1 = B; r1 != 0; r2 = r1, r1 = r, x2 = x1, y2 = y1, x1 = x, y1 = y ) {
        q = r2 / r1;
        r = r2 % r1;
        x = x2 - (q * x1);
        y = y2 - (q * y1);
    }
    *X = x2; *Y = y2;
    return r2;
}

inline vlong modInv ( vlong a, vlong m ) {
    vlong x, y;
    ext_gcd( a, m, &x, &y );
    x %= m;
    if ( x < 0 ) x += m;
    return x;
}

inline vlong bigmod ( vlong a, vlong p, vlong m ) {
    vlong res = 1 % m, x = a % m;
    while ( p ) {
        if ( p & 1 ) res = ( res * x ) % m;
        x = ( x * x ) % m; p >>= 1;
    }
    return res;
}


//int knightDir[8][2] = { {-2,1},{-1,2},{1,2},{2,1},{2,-1},{-1,-2},{1,-2},{-2,-1} };
//int dir4[4][2] = {{-1,0},{0,1},{1,0},{0,-1}};
//int dir8[8][2] = {{-1,0},{0,1},{1,0},{0,-1},{-1,-1},{1,1},{1,-1},{-1,1}};
const vlong inf = 2147383647;
const vlong mod = 1000000007;
const double pi = 2 * acos ( 0.0 );
const double eps = 1e-11;

///======================  TEMPLATE ENDS HERE  =====================///


class PingPongQueue {
public:
	vector <int> whoPlaysNext(vector <int> skills, int M, int K) {
		int N = skills.size();
		queue<int> q;
		for (int i=2; i<N; i++) {
			q.push(i);
		}

		int cwin = 0, lw = -1, cp1 = 0, cp2 = 1, ls, ws;
		while(K>0) {
			K--;
			ls = MIN(skills[cp1], skills[cp2]);
			ws = MAX(skills[cp1], skills[cp2]);
			if (skills[cp1] > skills[cp2]) {
				q.push(cp2);
				cp2 = q.front();
				q.pop();
				if (lw == cp1) {
					cwin++;
				}
				else {
					lw = cp1;
					cwin = 1;
				}
			}
			else {
				q.push(cp1);
				cp1 = q.front();
				q.pop();
				if (lw == cp2) {
					cwin++;
				}
				else {
					lw = cp2;
					cwin = 1;
				}
			}
			if (cwin == M) {
				cwin = 0;
				if (lw == cp1) {
					q.push(cp1);
					cp1 = q.front();
					q.pop();
				}
				else {
					q.push(cp2);
					cp2 = q.front();
					q.pop();
				}
				lw = -1;
			}
		}

		std::vector<int> res;
		res.push_back(ls);
		res.push_back(ws);

		return res;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, int p2, bool hasAnswer, vector <int> p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1 << "," << p2;
	cout << "]" << endl;
	PingPongQueue *obj;
	vector <int> answer;
	obj = new PingPongQueue();
	clock_t startTime = clock();
	answer = obj->whoPlaysNext(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p3.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p3[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p3.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p3[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;

	vector <int> p0;
	int p1;
	int p2;
	vector <int> p3;

	// ----- test 0 -----
	disabled = false;
	p0 = {1,2,3};
	p1 = 2;
	p2 = 2;
	p3 = {2,3};
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 1 -----
	disabled = false;
	p0 = {1,2,3};
	p1 = 2;
	p2 = 4;
	p3 = {1,2};
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 2 -----
	disabled = false;
	p0 = {49,24,26,12,5,33,25,30,35,41,46,23,21,3,38,43,11,19,34,29,20,32,39,7,50};
	p1 = 10;
	p2 = 399;
	p3 = {12,50};
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	// ----- test 3 -----
	disabled = false;
	p0 = {30,12};
	p1 = 34;
	p2 = 80;
	p3 = {12,30};
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------

	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// This task is about a group of people who like to play ping pong.
// All games of ping pong mentioned in this task are one-on-one games.
//
// You are given a vector <int> skills.
// Each element of skills is the skill level of one person in the group.
// The skill levels are all distinct.
// Whenever two people play a game of ping pong, the one with the higher skill level always wins.
//
// All people in the group would like to play but they only have a single table.
// Therefore, only two people can play at any given time.
//
// There will be a sequence of games, numbered starting from 1.
// Game 1 will be played by the players who correspond to skills[0] and skills[1].
// All the remaining people will form a queue, in the order in which they are given in skills.
// After each game the following things will happen, in order:
//
// The person who lost the game leaves the table and goes to the end of the queue.
// If the person who won the game has already won N games in a row, they also leave the table and they go to the end of the queue (behind the person who lost the last game).
// While there are fewer than two people at the table, the first person in the queue leaves the queue and goes to the table.
// The two people at the table play the next game.
//
//
// You are given the vector <int> skills, the int N, and an int K.
// Return the two-element vector <int> { L, W }, where L and W are the skills of the loser and the winner of game K, in this order.
//
// DEFINITION
// Class:PingPongQueue
// Method:whoPlaysNext
// Parameters:vector <int>, int, int
// Returns:vector <int>
// Method signature:vector <int> whoPlaysNext(vector <int> skills, int N, int K)
//
//
// CONSTRAINTS
// -skills will contain between 2 and 50 elements, inclusive.
// -Each element of skills will be between 1 and 50, inclusive.
// -All elements of skills will be distinct.
// -N will be between 1 and 100, inclusive.
// -K will be between 1 and 1000, inclusive.
//
//
// EXAMPLES
//
// 0)
// {1, 2, 3}
// 2
// 2
//
// Returns: {2, 3 }
//
// In all annotations, we call people by their skill. For example, "player 7" means "the player whose skill level is 7".
//
// In this example players 1 and 2 play the first game, and player 2 wins.
// For the second game, player 3 joins player 2, so we return { 2, 3 }.
//
// 1)
// {1, 2, 3}
// 2
// 4
//
// Returns: {1, 2 }
//
// The sequence of games is as follows:
//
// Player 1 loses to player 2.
// Player 2 loses to player 3.
// Player 1 loses to player 3. After this player 1 joins the queue, player 3 also steps down because he just won 2 games in a row and joins the queue.
// Player 1 loses to player 2.
//
//
// 2)
// {49, 24, 26, 12, 5, 33, 25, 30, 35, 41, 46, 23, 21, 3, 38, 43, 11, 19, 34, 29, 20, 32, 39, 7, 50}
// 10
// 399
//
// Returns: {12, 50 }
//
//
//
// 3)
// {30, 12}
// 34
// 80
//
// Returns: {12, 30 }
//
//
//
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
