#include <bits/stdc++.h>
using namespace std;

#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

//#include <sys/resource.h>     // for linux stack memory increase

#define pb push_back
#define MP make_pair
#define ff first
#define ss second
#define nl puts("")
#define sp printf(" ")
#define phl debug("Hello")
#define FOR(i,x,y) for(vlong i = (x) ; i <= (y) ; ++i)
#define ROF(i,x,y) for(vlong i = (y) ; i >= (x) ; --i)
#define CLR(x,y) memset(x,y,sizeof(x))
#define ALL(x) (x).begin(),(x).end()
#define SZ(x) ((vlong)(x).size())
#define UNIQUE(V) (V).erase(unique((V).begin(),(V).end()),(V).end())
#define MIN(a,b) ((a)<(b)?(a):(b))
#define MAX(a,b) ((a)>(b)?(a):(b))
#define ABS(x) ((x)<0?-(x):(x))
#define FABS(x) ((x)+eps<0?-(x):(x))
#define SQ(x) ((x)*(x))
#define LCM(x,y) (((x)/gcd((x),(y)))*(y))
#define POPCOUNT __builtin_popcountll
#define RIGHTMOST __builtin_ctzll
#define LEFTMOST(x) (63-__builtin_clzll((x)))
#define NUMDIGIT(x,y) (((vlong)(log10((x))/log10((y))))+1)
#define NORM(x) if(x>=mod) x-=mod;if(x<0) x+=mod;
#define ODD(x) (((x)&1)==0?(0):(1))
#define Set(N,cur) N=(N|(1LL<<cur))
#define Reset(N,cur) N=(N&(~(1LL<<cur)))
#define Check(N,cur) (!((N&(1LL<<(cur)))==0))
#define fast_cin ios_base::sync_with_stdio(false);cin.tie(NULL)

typedef long long vlong;
typedef unsigned long long uvlong;
typedef pair < int, int > pii;
typedef pair < vlong, vlong > pll;
typedef vector<int> vi;
typedef vector<vlong> vl;
typedef vector<pll> vll;
typedef tree <int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pb_ds;

#ifdef forthright48
     #include <ctime>
     clock_t tStart = clock();
     #define debug(args...) {dbg,args; cerr<<endl;}
     #define timeStamp debug ("Execution Time: ", (double)(clock() - tStart)/CLOCKS_PER_SEC)
     #define bug printf("%d\n",__LINE__);

#else
    #define debug(args...)  // Just strip off all debug tokens
    #define timeStamp
#endif

struct debugger{
    template<typename T> debugger& operator , (const T& v){
        cerr<<v<<" ";
        return *this;
    }
}dbg;

inline vlong gcd ( vlong a, vlong b ) {
    a = ABS ( a ); b = ABS ( b );
    while ( b ) { a = a % b; swap ( a, b ); } return a;
}

vlong ext_gcd ( vlong A, vlong B, vlong *X, vlong *Y ){
    vlong x2, y2, x1, y1, x, y, r2, r1, q, r;
    x2 = 1; y2 = 0;
    x1 = 0; y1 = 1;
    for (r2 = A, r1 = B; r1 != 0; r2 = r1, r1 = r, x2 = x1, y2 = y1, x1 = x, y1 = y ) {
        q = r2 / r1;
        r = r2 % r1;
        x = x2 - (q * x1);
        y = y2 - (q * y1);
    }
    *X = x2; *Y = y2;
    return r2;
}

inline vlong modInv ( vlong a, vlong m ) {
    vlong x, y;
    ext_gcd( a, m, &x, &y );
    x %= m;
    if ( x < 0 ) x += m;
    return x;
}

inline vlong bigmod ( vlong a, vlong p, vlong m ) {
    vlong res = 1 % m, x = a % m;
    while ( p ) {
        if ( p & 1 ) res = ( res * x ) % m;
        x = ( x * x ) % m; p >>= 1;
    }
    return res;
}


//int knightDir[8][2] = { {-2,1},{-1,2},{1,2},{2,1},{2,-1},{-1,-2},{1,-2},{-2,-1} };
//int dir4[4][2] = {{-1,0},{0,1},{1,0},{0,-1}};
//int dir8[8][2] = {{-1,0},{0,1},{1,0},{0,-1},{-1,-1},{1,1},{1,-1},{-1,1}};
const vlong inf = 2147383647;
const vlong mod = 1000000007;
const double pi = 2 * acos ( 0.0 );
const double eps = 1e-11;

///======================  TEMPLATE ENDS HERE  =====================///


class Resistance {
public:
	vector <double> spyProbability(int P, int S, vector <string> missions) {
		int c[20]; CLR(c,0);
		int cc = 0;
		for (int i=0; i<(1<<P); i++) {
			if (POPCOUNT(i) != S) continue;
			bool ok = 1;
			for (int j=0; j<missions.size(); j++) {
				if (missions[j][0] == 'S') continue;
				else {
					ok = 0;
					for (int k=1; k<=P; k++) {
						if (missions[j][k] == '1') {
							if ( Check(i,k-1) ) {
								ok = 1;
								break;
							}
						}
					}
					if (!ok) break;
				}
			}
			if (!ok) continue;
			cc++;
			for (int j=0; j<P; j++) {
				if ( Check(i,j) ) {
					c[j]++;
				}
			}
		}
		vector<double> res;
		if (cc == 0) {
			return res;
		}
		for (int i=0; i<P; i++) {
			double now = (double)c[i]/(double)cc;
			res.push_back(now);
		}
		return res;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit-pf 2.3.0
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cmath>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, vector <string> p2, bool hasAnswer, vector <double> p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p2[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	Resistance *obj;
	vector <double> answer;
	obj = new Resistance();
	clock_t startTime = clock();
	answer = obj->spyProbability(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p3.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p3[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p3.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != answer[i] || fabs(p3[i] - answer[i]) > 1e-9 * max(1.0, fabs(p3[i]))) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	bool disabled;
	bool tests_disabled;
	all_right = true;
	tests_disabled = false;
	
	int p0;
	int p1;
	vector <string> p2;
	vector <double> p3;
	
	// ----- test 0 -----
	disabled = false;
	p0 = 4;
	p1 = 1;
	p2 = {"S0110","F1100","S0011"};
	p3 = {0.5,0.5,0.0,0.0};
	all_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 1 -----
	disabled = false;
	p0 = 4;
	p1 = 2;
	p2 = {"F0100","S0101","F1010","S1011"};
	p3 = {0.5,1.0,0.5,0.0};
	all_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 2 -----
	disabled = false;
	p0 = 3;
	p1 = 1;
	p2 = {"F110","F101","F011"};
	p3 = {};
	all_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 3 -----
	disabled = false;
	p0 = 5;
	p1 = 2;
	p2 = {"F11000","S00011","F10100","S01111"};
	p3 = {0.8,0.4,0.4,0.2,0.2};
	all_right = (disabled || KawigiEdit_RunTest(3, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	// ----- test 4 -----
	disabled = false;
	p0 = 9;
	p1 = 3;
	p2 = {"S100001100","F011110000","F001000010","F100010101","S010010001","F100001010","F000100100"};
	p3 = {0.3,0.1,0.4,0.5,0.2,0.1,0.6,0.7,0.1};
	all_right = (disabled || KawigiEdit_RunTest(4, p0, p1, p2, true, p3) ) && all_right;
	tests_disabled = tests_disabled || disabled;
	// ------------------
	
	if (all_right) {
		if (tests_disabled) {
			cout << "You're a stud (but some test cases were disabled)!" << endl;
		} else {
			cout << "You're a stud (at least on given cases)!" << endl;
		}
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// The Resistance is a multiplayer board game.
// During the game each player belongs into one of two groups: some are resistance members, others are spies.
// In this problem there are P players, and exactly S of them are spies.
// The players are numbered 0 through P-1.
// 
// 
// 
// 
// The game is played in rounds.
// In each round of the game a subset of all players goes on a mission.
// Each player who goes on the mission casts a secret vote on whether they want it to succeed or to fail.
// Resistance members always vote for the mission to succeed, and spies may cast either vote.
// (Sometimes a spy will vote for a mission to succeed in order to gain trust of the other players.)
// If at least one player on a mission voted for it to fail, the mission fails.
// If everybody voted for the mission to succeed, it succeeds.
// 
// 
// 
// 
// You are given the ints P and S.
// You are also given the vector <string> missions: data on all the missions that already took place.
// Each mission is described by a string.
// The first character of that string is 'F' for a failed mission or 'S' for a successful one.
// The next P characters describe which players went on the mission: for each valid i, character (i+1) is '1' if player i went on the misson and '0' otherwise.
// 
// 
// 
// 
// Verify whether the mission history is valid.
// If there is no assignment of roles (spies / resistance members) to players that would be consistent with the given mission history, return an empty vector <double>.
// 
// 
// 
// 
// If the mission history is valid, assume that each of the matching assignments of roles to players is equally likely.
// Return a vector <double> containing P elements.
// For each i, the i-th element of the return value should be the probability that player i is a spy, given the above assumption.
// 
// 
// DEFINITION
// Class:Resistance
// Method:spyProbability
// Parameters:int, int, vector <string>
// Returns:vector <double>
// Method signature:vector <double> spyProbability(int P, int S, vector <string> missions)
// 
// 
// NOTES
// -Each element of your return value must have an absolute or a relative error smaller than 1e-9.
// 
// 
// CONSTRAINTS
// -P will be between 3 and 10, inclusive.
// -S will be between 1 and P, inclusive.
// -missions will contain between 1 and 50 elements, inclusive.
// -Each element of missions will contain exactly P+1 characters.
// -For each element of missions, its first character will be 'S' or 'F', and the rest of the characters will be '0' or '1'.
// -Each element of missions will contain at least one '1' character.
// 
// 
// EXAMPLES
// 
// 0)
// 4
// 1
// {"S0110",
//  "F1100",
//  "S0011"}
// 
// Returns: {0.5, 0.5, 0.0, 0.0 }
// 
// There is only one spy. Players 2 and 3 cannot be the spy because neither of them went on the failed mission. Players 0 and 1 can be spies. As both scenarios are valid, each of these two players is a spy with probability 50%.
// 
// 1)
// 4
// 2
// {"F0100",
//  "S0101",
//  "F1010",
//  "S1011"}
// 
// Returns: {0.5, 1.0, 0.5, 0.0 }
// 
// Now we have two spies. Only one player went to the first failed mission, so we can be certain that player 1 is a spy. Based on the second failed mission, one of players 0 and 2 must be a spy. Both possibilities match the rest of the input, so we assign each of them probability 50% of being a spy.
// 
// Note that player 1 (a known spy) once voted for a success of a mission.
// 
// 2)
// 3
// 1
// {"F110",
//  "F101",
//  "F011"}
// 
// Returns: { }
// 
// There is supposed to be only one spy, but no player went on all three failed missions, so the mission history is invalid.
// 
// 3)
// 5
// 2
// {"F11000",
//  "S00011",
//  "F10100",
//  "S01111"}
// 
// Returns: {0.8, 0.4, 0.4, 0.2, 0.2 }
// 
// One possibility is that the spies are players 1 and 2. Another possibility is that one of the spies is player 0 and the other spy can be any of the other four players.
// 
// 4)
// 9
// 3
// {"S100001100",
//  "F011110000",
//  "F001000010",
//  "F100010101",
//  "S010010001",
//  "F100001010",
//  "F000100100"}
// 
// Returns: {0.3, 0.1, 0.4, 0.5, 0.2, 0.1, 0.6, 0.7, 0.1 }
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit-pf 2.3.0!
